openapi: 3.0.1
info:
  title: Twitch API
  contact:
    email: d19921207@gmail.com
  version: 1.0.0
externalDocs:
  url: https://dev.twitch.tv/docs/api
servers:
  - url: https://api.twitch.tv/helix
tags:
  - name: stream
    description: stream
    externalDocs:
      url: https://dev.twitch.tv/docs/api/reference
  - name: user
    description: user
    externalDocs:
      url: https://dev.twitch.tv/docs/api/reference
  - name: subscription
    description: EventSub
    externalDocs:
      url: https://dev.twitch.tv/docs/eventsub
  - name: callback
    description: Callback of EventSub
    externalDocs:
      url: https://dev.twitch.tv/docs/eventsub
paths:
  /streams:
    get:
      tags:
        - stream
      summary: paginate streams
      parameters:
        - name: after
          in: query
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
        - name: first
          in: query
          schema:
            type: integer
            maximum: 100
            default: 20
        - name: game_id
          in: query
          schema:
            type: array
            items:
              type: string
            maxLength: 100
        - name: language
          in: query
          schema:
            type: array
            items:
              type: string
            maxLength: 100
        - name: user_id
          in: query
          schema:
            type: array
            items:
              type: string
            maxLength: 100
        - name: user_login
          in: query
          schema:
            type: array
            items:
              type: string
            maxLength: 100
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamPagination'

  /users:
    get:
      tags:
        - user
      summary: get users
      parameters:
        - name: id
          in: query
          schema:
            type: array
            items:
              type: string
            maxLength: 100
        - name: login
          in: query
          schema:
            type: array
            items:
              type: string
            maxLength: 100
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /eventsub/subscriptions:
    get:
      tags:
        - subscription
      summary: list event subscriptions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionListWithCost'
    post:
      tags:
        - subscription
      summary: Create an event subscription
      requestBody:
        description: Subscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionToPost'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionListWithCost'
    delete:
      tags:
        - subscription
      summary: Create an event subscription
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: "f1c2a387-161a-49f9-a165-0f21d7a4e1c4"
      responses:
        204:
          description: successful operation
  /example/callback-handshake:
    post:
      tags:
        - subscription
        - callback
      summary: subscription callback (handshake)
      requestBody:
        description: Challenge
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequestBody'
      responses:
        200:
          description: Challenge Response
          headers:
            Twitch-Eventsub-Message-Id:
              $ref: '#/components/headers/Twitch-Eventsub-Message-Id'
            Twitch-Eventsub-Message-Timestamp:
              $ref: '#/components/headers/Twitch-Eventsub-Message-Timestamp'
            Twitch-Eventsub-Message-Signature:
              $ref: '#/components/headers/Twitch-Eventsub-Message-Signature'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VerificationResponseBody'
  /example/callback-notification:
    post:
      tags:
        - subscription
        - callback
      summary: subscription callback (notification)
      requestBody:
        description: Notification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        200:
          description: successful operation
          headers:
            Twitch-Eventsub-Message-Id:
              $ref: '#/components/headers/Twitch-Eventsub-Message-Id'
            Twitch-Eventsub-Message-Timestamp:
              $ref: '#/components/headers/Twitch-Eventsub-Message-Timestamp'
            Twitch-Eventsub-Message-Signature:
              $ref: '#/components/headers/Twitch-Eventsub-Message-Signature'
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    CallbackRequestBody:
      anyOf:
        - $ref: '#/components/schemas/VerificationRequestBody'
        - $ref: '#/components/schemas/Notification'
    Challenge:
      type: string
      example: "pogchamp-kappa-360noscope-vohiyo"
    Condition:
      type: object
      properties:
        broadcaster_user_id:
          type: string
          example: "12826"
    Event:
      anyOf:
        - $ref: '#/components/schemas/EventChannelFollow'
        - $ref: '#/components/schemas/EventStreamOffline'
        - $ref: '#/components/schemas/EventStreamOnline'
    EventChannelFollow:
      type: object
      properties:
        user_id:
          type: string
          example: "1234"
        user_login:
          type: string
          example: "cool_user"
        user_name:
          type: string
          example: "Cool_User"
        broadcaster_user_id:
          type: string
          example: "1337"
        broadcaster_user_login:
          type: string
          example: "cooler_user"
        broadcaster_user_name:
          type: string
          example: "Cooler_User"
        followed_at:
          type: string
          format: date-time
      required:
        - user_id
        - user_login
        - user_name
        - broadcaster_user_id
        - broadcaster_user_login
        - broadcaster_user_name
        - followed_at
    EventStreamOffline:
      type: object
      properties:
        broadcaster_user_id:
          type: string
          example: "1337"
        broadcaster_user_login:
          type: string
          example: "cool_user"
        broadcaster_user_name:
          type: string
          example: "Cool_User"
      required:
        - broadcaster_user_id
        - broadcaster_user_login
        - broadcaster_user_name
    EventStreamOnline:
      type: object
      properties:
        id:
          type: string
          example: "9001"
          description: "the id of the stream"
        broadcaster_user_id:
          type: string
          example: "1337"
        broadcaster_user_login:
          type: string
          example: "cool_user"
        broadcaster_user_name:
          type: string
          example: "Cool_User"
        type:
          type: string
          enum:
            - "live"
            - "playlist"
            - "watch_party"
            - "premiere"
            - "rerun"
        started_at:
          type: string
          format: date-time
      required:
        - id
        - broadcaster_user_id
        - broadcaster_user_login
        - broadcaster_user_name
        - type
        - started_at
    ListWithCost:
      type: object
      properties:
        total:
          type: integer
          example: 1
        total_cost:
          type: integer
          example: 1
        max_total_cost:
          type: integer
          example: 10000
        limit:
          type: integer
          example: 10000
      required:
        - total
        - total_cost
        - max_total_cost
        - limit
    Notification:
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionToGet'
        event:
          $ref: '#/components/schemas/Event'
      required:
        - subscription
        - event
    Pagination:
      type: object
      properties:
        pagination:
          type: object
          properties:
            cursor:
              type: string
              example: "eyJiIjp7IkN1cnNvciI6ImV5SnpJam8zT0RNMk5TNDBORFF4TlRjMU1UY3hOU3dpWkNJNlptRnNjMlVzSW5RaU9uUnlkV1Y5In0sImEiOnsiQ3Vyc29yIjoiZXlKeklqb3hOVGs0TkM0MU56RXhNekExTVRZNU1ESXNJbVFpT21aaGJITmxMQ0owSWpwMGNuVmxmUT09In19"
          required:
            - cursor
      required:
        - pagination
    Stream:
      type: object
      properties:
        id:
          type: string
          example: "41375541868"
        user_id:
          type: string
          example: "459331509"
        user_login:
          type: string
          example: "auronplay"
        user_name:
          type: string
          example: "auronplay"
        game_id:
          type: string
          example: "494131"
        game_name:
          type: string
          example: "Little Nightmares"
        type:
          type: string
          description: "empty in case of error"
          enum:
            - "live"
            - ""
        title:
          type: string
          example: "hablamos y le damos a Little Nightmares 1"
        viewer_count:
          type: integer
          example: 78365
        started_at:
          type: string
          format: date-time
        language:
          type: string
          example: "es"
        thumbnail_url:
          type: string
          example: "https://static-cdn.jtvnw.net/previews-ttv/live_user_auronplay-{width}x{height}.jpg"
        tag_ids:
          type: array
          items:
            type: string
            example: "d4bb9c58-2141-4881-bcdc-3fe0505457d1"
        is_mature:
          type: boolean
      required:
        - id
        - user_id
        - user_login
        - user_name
        - game_id
        - game_name
        - type
        - title
        - viewer_count
        - started_at
        - language
        - thumbnail_url
        - tag_ids
        - is_mature
    StreamPagination:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Stream'
          required:
            - data
    SubscriptionCommon:
      type: object
      required:
        - type
        - version
        - condition
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionType'
        version:
          type: string
          example: "1"
        condition:
          $ref: '#/components/schemas/Condition'
    SubscriptionListWithCost:
      allOf:
        - $ref: '#/components/schemas/ListWithCost'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/SubscriptionToGet'
          required:
            - data
    SubscriptionToPost:
      allOf:
        - $ref: '#/components/schemas/SubscriptionCommon'
        - type: object
          required:
            - transport
          properties:
            transport:
              $ref: '#/components/schemas/TransportToPost'
    SubscriptionToGet:
      allOf:
        - $ref: '#/components/schemas/SubscriptionCommon'
        - type: object
          properties:
            id:
              type: string
              example: "f1c2a387-161a-49f9-a165-0f21d7a4e1c4"
            status:
              type: string
              enum:
                - "enabled"
                - "webhook_callback_verification_pending"
                - "webhook_callback_verification_failed"
                - "notification_failures_exceeded"
                - "authorization_revoked"
                - "user_removed"
            cost:
              type: integer
              example: 1
            transport:
              $ref: '#/components/schemas/TransportToGet'
            created_at:
              type: string
              format: date-time
          required:
            - id
            - status
            - cost
            - transport
            - created_at
    SubscriptionType:
      type: string
      enum:
        - "channel.follow"
        - "stream.online"
        - "stream.offline"
    TransportCommon:
      type: object
      required:
        - method
        - callback
      properties:
        method:
          type: string
          enum:
            - "webhook"
        callback:
          type: string
          example: "https://example.com/webhooks/callback"
          description: "valid https URI"
    TransportToGet:
      $ref: '#/components/schemas/TransportCommon'
    TransportToPost:
      allOf:
        - $ref: '#/components/schemas/TransportCommon'
        - type: object
          required:
            - secret
          properties:
            secret:
              type: string
              example: "s3cRe7"
              description: "shared secret for HMAC-SHA256"
    User:
      type: object
      properties:
        id:
          type: string
          example: "141981764"
        login:
          type: string
          example: "twitchdev"
        display_name:
          type: string
          example: "TwitchDev"
        type:
          type: string
          enum:
            - "staff"
            - "admin"
            - "global_mod"
            - ""
        broadcaster_type:
          type: string
          enum:
            - "partner"
            - "affiliate"
            - ""
        description:
          type: string
          example: "Supporting third-party developers building Twitch integrations from chatbots to game integrations."
        profile_image_url:
          type: string
          example: "https://static-cdn.jtvnw.net/jtv_user_pictures/8a6381c7-d0c0-4576-b179-38bd5ce1d6af-profile_image-300x300.png"
        offline_image_url:
          type: string
          example: "https://static-cdn.jtvnw.net/jtv_user_pictures/3f13ab61-ec78-4fe6-8481-8682cb3b0ac2-channel_offline_image-1920x1080.png"
        view_count:
          type: integer
          example: 5980557
        email:
          type: string
          example: "not-real@email.com"
        created_at:
          type: string
          example: "2016-12-14T20:32:28.894263Z"
      required:
        - id
        - login
        - display_name
        - type
        - broadcaster_type
        - description
        - profile_image_url
        - offline_image_url
        - view_count
        - email
        - created_at
    UserList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - data
    VerificationRequestBody:
      type: object
      properties:
        challenge:
          $ref: '#/components/schemas/Challenge'
        subscription:
          $ref: '#/components/schemas/SubscriptionToGet'
      required:
        - challenge
        - subscription
    VerificationResponseBody:
      $ref: '#/components/schemas/Challenge'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  headers:
    Twitch-Eventsub-Message-Id:
      schema:
        type: string
    Twitch-Eventsub-Message-Timestamp:
      schema:
        type: string
    Twitch-Eventsub-Message-Signature:
      schema:
        type: string
      description: HMAC-SHA256 signature of Id + Timestamp + Body

security:
  - bearerAuth: []
